/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka {
 static YVM fichYVM = new YVM("Fichier YVM");
 static YVMasm fichYVMasm = new YVMasm("Fichier YVMasm");
 static Expression exp = new Expression(fichYVM,fichYVMasm);
 static TabIdent tab = new TabIdent();
 static Declaration dec = new Declaration(fichYVM, fichYVMasm);

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> <ident>	
   bloc()
   <FPROGRAMME> 
}

void bloc() : {}{
 (declConst())*
 (declVar())*		
   suiteExpr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> {dec.identLu=YakaTokenManager.identLu;} 	
   "=" valConst()
    
}

void valConst() : {}{
  <entier> {dec.placerConst(dec.identLu,YakaTokenManager.entierLu,type.ENTIER,tab);}
 | <ident>	{dec.placerConst(dec.identLu,YakaTokenManager.identLu,tab.chercheIdent(YakaTokenManager.identLu).getType(),tab);}	
 | <VRAI> 	{dec.placerConst(dec.identLu,YakaTokenManager.identLu,type.BOOL,tab);}	
 | <FAUX> 	{dec.placerConst(dec.identLu,YakaTokenManager.identLu,type.BOOL,tab);}	
}


void declVar() : {}
{
  <VAR> type()	
  <ident> {dec.placerVariable(YakaTokenManager.identLu,tab.iterateur,dec.typeLu,tab);}	
  ("," 
      <ident> {dec.placerVariable(YakaTokenManager.identLu,tab.iterateur,dec.typeLu,tab);} 
  )* ";"
	
}

void type() :{}
{
   <ENTIER> {dec.typeLu=type.ENTIER;}		
 | <BOOLEEN> {dec.typeLu=type.BOOL;}	
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{ (expression() (";" (expression())? )*)? }



/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {exp.OppRel();}
  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd()
   terme()  {exp.OppAdd();}
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul()
  facteur()	{exp.OppMul();}
  )*
}
void facteur() : {}
{   primaire() 
  |  (opNeg() primaire()) {exp.OppNeg();} 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> {exp.empileType('e');}
 | <ident> {exp.empileType(tab.chercheIdent(YakaTokenManager.identLu).getType());}
 | <VRAI>  {exp.empileType('b');}
 | <FAUX>  {exp.empileType('b');}
 
}

void opRel() : {}
{
   "=" {exp.empileOp('=');}
 | "<>"{exp.empileOp('d');}
 | "<" {exp.empileOp('<');}
 | "<="{exp.empileOp('i');}	
 | ">" {exp.empileOp('>');}		
 | ">="{exp.empileOp('s');}	
} 

void opAdd() : {}
{
    "+"	{exp.empileOp('+');}
  |  "-" {exp.empileOp('-');}  
  | <OU> {exp.empileOp('o');}
}

void opMul() : {}
{
  "*" {exp.empileOp('*');}		
  | "/"	{exp.empileOp('/');}
  | <ET> {exp.empileOp('a');}
} 

void opNeg() : {}
{ "-"	{exp.empileOp('-');}	
 | <NON> {exp.empileOp('n');}	
}


